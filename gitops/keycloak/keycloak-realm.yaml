apiVersion: k8s.keycloak.org/v2alpha1
kind: KeycloakRealmImport
metadata:
  name: rhdh-realm
  namespace: demo-project
spec:
  keycloakCRName: demo-keycloak-instance
  realm:
    realm: "rhdh"
    notBefore: 0
    defaultSignatureAlgorithm: "RS256"
    revokeRefreshToken: false
    refreshTokenMaxReuse: 0
    accessTokenLifespan: 300
    accessTokenLifespanForImplicitFlow: 900
    ssoSessionIdleTimeout: 1800
    ssoSessionMaxLifespan: 36000
    ssoSessionIdleTimeoutRememberMe: 0
    ssoSessionMaxLifespanRememberMe: 0
    offlineSessionIdleTimeout: 2592000
    offlineSessionMaxLifespanEnabled: false
    offlineSessionMaxLifespan: 5184000
    clientSessionIdleTimeout: 0
    clientSessionMaxLifespan: 0
    clientOfflineSessionIdleTimeout: 0
    clientOfflineSessionMaxLifespan: 0
    accessCodeLifespan: 60
    accessCodeLifespanUserAction: 300
    accessCodeLifespanLogin: 1800
    actionTokenGeneratedByAdminLifespan: 43200
    actionTokenGeneratedByUserLifespan: 300
    oauth2DeviceCodeLifespan: 600
    oauth2DevicePollingInterval: 5
    enabled: true
    sslRequired: "external"
    registrationAllowed: false
    registrationEmailAsUsername: false
    rememberMe: false
    verifyEmail: false
    loginWithEmailAllowed: true
    duplicateEmailsAllowed: false
    resetPasswordAllowed: false
    editUsernameAllowed: false
    bruteForceProtected: false
    permanentLockout: false
    maxFailureWaitSeconds: 900
    minimumQuickLoginWaitSeconds: 60
    waitIncrementSeconds: 60
    quickLoginCheckMilliSeconds: 1000
    maxDeltaTimeSeconds: 43200
    failureFactor: 30
    roles:
      realm:
        - name: "uma_authorization"
          description: "${role_uma_authorization}"
          composite: false
          clientRole: false
        - name: "default-roles-testrealm"
          description: "${role_default-roles}"
          composite: true
          composites:
            realm:
              - "offline_access"
              - "uma_authorization"
            client:
              account:
                - "view-profile"
                - "manage-account"
          clientRole: false
        - name: "offline_access"
          description: "${role_offline-access}"
          composite: false
          clientRole: false
      client:
        rhdh-client: []
        realm-management:
          - name: "manage-authorization"
            description: "${role_manage-authorization}"
            composite: false
            clientRole: true
          - name: "view-events"
            description: "${role_view-events}"
            composite: false
            clientRole: true
          - name: "query-clients"
            description: "${role_query-clients}"
            composite: false
            clientRole: true
          - name: "manage-realm"
            description: "${role_manage-realm}"
            composite: false
            clientRole: true
          - name: "manage-identity-providers"
            description: "${role_manage-identity-providers}"
            composite: false
            clientRole: true
          - name: "realm-admin"
            description: "${role_realm-admin}"
            composite: true
            composites:
              client:
                realm-management:
                  - "view-events"
                  - "manage-authorization"
                  - "query-clients"
                  - "manage-realm"
                  - "manage-identity-providers"
                  - "create-client"
                  - "view-realm"
                  - "impersonation"
                  - "view-identity-providers"
                  - "view-clients"
                  - "view-users"
                  - "query-realms"
                  - "query-users"
                  - "manage-users"
                  - "view-authorization"
                  - "manage-clients"
                  - "query-groups"
                  - "manage-events"
            clientRole: true
          - name: "create-client"
            description: "${role_create-client}"
            composite: false
            clientRole: true
          - name: "view-realm"
            description: "${role_view-realm}"
            composite: false
            clientRole: true
          - name: "impersonation"
            description: "${role_impersonation}"
            composite: false
            clientRole: true
          - name: "view-identity-providers"
            description: "${role_view-identity-providers}"
            composite: false
            clientRole: true
          - name: "view-clients"
            description: "${role_view-clients}"
            composite: true
            composites:
              client:
                realm-management:
                  - "query-clients"
            clientRole: true
          - name: "view-users"
            description: "${role_view-users}"
            composite: true
            composites:
              client:
                realm-management:
                  - "query-users"
                  - "query-groups"
            clientRole: true
          - name: "query-realms"
            description: "${role_query-realms}"
            composite: false
            clientRole: true
          - name: "query-users"
            description: "${role_query-users}"
            composite: false
            clientRole: true
          - name: "manage-users"
            description: "${role_manage-users}"
            composite: false
            clientRole: true
          - name: "view-authorization"
            description: "${role_view-authorization}"
            composite: false
            clientRole: true
          - name: "manage-clients"
            description: "${role_manage-clients}"
            composite: false
            clientRole: true
          - name: "manage-events"
            description: "${role_manage-events}"
            composite: false
            clientRole: true
          - name: "query-groups"
            description: "${role_query-groups}"
            composite: false
            clientRole: true
        security-admin-console: []
        admin-cli: []
        account-console: []
        broker:
          - name: "read-token"
            description: "${role_read-token}"
            composite: false
            clientRole: true
        account:
          - name: "view-profile"
            description: "${role_view-profile}"
            composite: false
            clientRole: true
          - name: "view-groups"
            description: "${role_view-groups}"
            composite: false
            clientRole: true
          - name: "delete-account"
            description: "${role_delete-account}"
            composite: false
            clientRole: true
          - name: "manage-consent"
            description: "${role_manage-consent}"
            composite: true
            composites:
              client:
                account:
                  - "view-consent"
            clientRole: true
          - name: "view-applications"
            description: "${role_view-applications}"
            composite: false
            clientRole: true
          - name: "view-consent"
            description: "${role_view-consent}"
            composite: false
            clientRole: true
          - name: "manage-account-links"
            description: "${role_manage-account-links}"
            composite: false
            clientRole: true
          - name: "manage-account"
            description: "${role_manage-account}"
            composite: true
            composites:
              client:
                account:
                  - "manage-account-links"
            clientRole: true
    groups: []
    defaultRole:
      name: "default-roles-testrealm"
      description: "${role_default-roles}"
      composite: true
      clientRole: false
    requiredCredentials:
      - "password"
    otpPolicyType: "totp"
    otpPolicyAlgorithm: "HmacSHA1"
    otpPolicyInitialCounter: 0
    otpPolicyDigits: 6
    otpPolicyLookAheadWindow: 1
    otpPolicyPeriod: 30
    otpPolicyCodeReusable: false
    otpSupportedApplications:
      - "totpAppFreeOTPName"
      - "totpAppMicrosoftAuthenticatorName"
      - "totpAppGoogleName"
    webAuthnPolicyRpEntityName: "keycloak"
    webAuthnPolicySignatureAlgorithms:
      - "ES256"
    webAuthnPolicyRpId: ""
    webAuthnPolicyAttestationConveyancePreference: "not specified"
    webAuthnPolicyAuthenticatorAttachment: "not specified"
    webAuthnPolicyRequireResidentKey: "not specified"
    webAuthnPolicyUserVerificationRequirement: "not specified"
    webAuthnPolicyCreateTimeout: 0
    webAuthnPolicyAvoidSameAuthenticatorRegister: false
    webAuthnPolicyAcceptableAaguids: []
    webAuthnPolicyPasswordlessRpEntityName: "keycloak"
    webAuthnPolicyPasswordlessSignatureAlgorithms:
      - "ES256"
    webAuthnPolicyPasswordlessRpId: ""
    webAuthnPolicyPasswordlessAttestationConveyancePreference: "not specified"
    webAuthnPolicyPasswordlessAuthenticatorAttachment: "not specified"
    webAuthnPolicyPasswordlessRequireResidentKey: "not specified"
    webAuthnPolicyPasswordlessUserVerificationRequirement: "not specified"
    webAuthnPolicyPasswordlessCreateTimeout: 0
    webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister: false
    webAuthnPolicyPasswordlessAcceptableAaguids: []
    users:
      - username: "user1"
        enabled: true
        emailVerified: true
        firstName: "user1"
        lastName: "rhdh-demo"
        email: "user1@rhdh-demo.com"
        credentials:
          - value: "rhdh"
      - username: "service-account-rhdh-client"
        enabled: true
        emailVerified: false
        serviceAccountClientId: "rhdh-client"
        realmRoles:
          - "default-roles-testrealm"
        clientRoles:
          realm-management:
            - "view-users"
            - "query-users"
            - "query-groups"
        notBefore: 0
    scopeMappings:
      - clientScope: "offline_access"
        roles:
          - "offline_access"
    clientScopeMappings:
      account:
        - client: "account-console"
          roles:
            - "manage-account"
            - "view-groups"
    clients:
      - clientId: "account"
        name: "${client_account}"
        rootUrl: "${authBaseUrl}"
        baseUrl: "/realms/testrealm/account/"
        enabled: true
        clientAuthenticatorType: "client-secret"
        redirectUris:
          - "/realms/testrealm/account/*"
        webOrigins: []
        notBefore: 0
        bearerOnly: false
        consentRequired: false
        standardFlowEnabled: true
        implicitFlowEnabled: false
        directAccessGrantsEnabled: false
        serviceAccountsEnabled: false
        publicClient: true
        frontchannelLogout: false
        protocol: "openid-connect"
        attributes:
          post.logout.redirect.uris: "+"
        fullScopeAllowed: false
        nodeReRegistrationTimeout: 0
        defaultClientScopes:
          - "web-origins"
          - "acr"
          - "roles"
          - "profile"
          - "email"
        optionalClientScopes:
          - "address"
          - "phone"
          - "offline_access"
          - "microprofile-jwt"
      - clientId: "account-console"
        name: "${client_account-console}"
        rootUrl: "${authBaseUrl}"
        baseUrl: "/realms/testrealm/account/"
        enabled: true
        clientAuthenticatorType: "client-secret"
        redirectUris:
          - "/realms/testrealm/account/*"
        webOrigins: []
        notBefore: 0
        bearerOnly: false
        consentRequired: false
        standardFlowEnabled: true
        implicitFlowEnabled: false
        directAccessGrantsEnabled: false
        serviceAccountsEnabled: false
        publicClient: true
        frontchannelLogout: false
        protocol: "openid-connect"
        attributes:
          post.logout.redirect.uris: "+"
          pkce.code.challenge.method: "S256"
        fullScopeAllowed: false
        nodeReRegistrationTimeout: 0
        protocolMappers:
          - name: "audience resolve"
            protocol: "openid-connect"
            protocolMapper: "oidc-audience-resolve-mapper"
            consentRequired: false
            config: {}
        defaultClientScopes:
          - "web-origins"
          - "acr"
          - "roles"
          - "profile"
          - "email"
        optionalClientScopes:
          - "address"
          - "phone"
          - "offline_access"
          - "microprofile-jwt"
      - clientId: "admin-cli"
        name: "${client_admin-cli}"
        enabled: true
        clientAuthenticatorType: "client-secret"
        redirectUris: []
        webOrigins: []
        notBefore: 0
        bearerOnly: false
        consentRequired: false
        standardFlowEnabled: false
        implicitFlowEnabled: false
        directAccessGrantsEnabled: true
        serviceAccountsEnabled: false
        publicClient: true
        frontchannelLogout: false
        protocol: "openid-connect"
        attributes: {}
        fullScopeAllowed: false
        nodeReRegistrationTimeout: 0
        defaultClientScopes:
          - "web-origins"
          - "acr"
          - "roles"
          - "profile"
          - "email"
        optionalClientScopes:
          - "address"
          - "phone"
          - "offline_access"
          - "microprofile-jwt"
      - clientId: "broker"
        name: "${client_broker}"
        enabled: true
        clientAuthenticatorType: "client-secret"
        redirectUris: []
        webOrigins: []
        notBefore: 0
        bearerOnly: true
        consentRequired: false
        standardFlowEnabled: true
        implicitFlowEnabled: false
        directAccessGrantsEnabled: false
        serviceAccountsEnabled: false
        publicClient: false
        frontchannelLogout: false
        protocol: "openid-connect"
        attributes: {}
        fullScopeAllowed: false
        nodeReRegistrationTimeout: 0
        defaultClientScopes:
          - "web-origins"
          - "acr"
          - "roles"
          - "profile"
          - "email"
        optionalClientScopes:
          - "address"
          - "phone"
          - "offline_access"
          - "microprofile-jwt"
      - clientId: "realm-management"
        name: "${client_realm-management}"
        enabled: true
        clientAuthenticatorType: "client-secret"
        redirectUris: []
        webOrigins: []
        notBefore: 0
        bearerOnly: true
        consentRequired: false
        standardFlowEnabled: true
        implicitFlowEnabled: false
        directAccessGrantsEnabled: false
        serviceAccountsEnabled: false
        publicClient: false
        frontchannelLogout: false
        protocol: "openid-connect"
        attributes: {}
        fullScopeAllowed: false
        nodeReRegistrationTimeout: 0
        defaultClientScopes:
          - "web-origins"
          - "acr"
          - "roles"
          - "profile"
          - "email"
        optionalClientScopes:
          - "address"
          - "phone"
          - "offline_access"
          - "microprofile-jwt"
      - clientId: "rhdh-client"
        name: ""
        description: ""
        rootUrl: ""
        adminUrl: ""
        baseUrl: ""
        enabled: true
        clientAuthenticatorType: "client-secret"
        secret: "7iKyQUwyApIojzOlSj82vUWIhejv41E5"
        redirectUris:
          - "https://backstage-developer-hub-demo-project.apps.apps.cluster-77vwz.77vwz.sandbox3219.opentlc.com/*"
        webOrigins:
          - "https://backstage-developer-hub-demo-project.apps.apps.cluster-77vwz.77vwz.sandbox3219.opentlc.com"
        notBefore: 0
        bearerOnly: false
        consentRequired: false
        standardFlowEnabled: true
        implicitFlowEnabled: false
        directAccessGrantsEnabled: true
        serviceAccountsEnabled: true
        publicClient: false
        frontchannelLogout: true
        protocol: "openid-connect"
        attributes:
          oidc.ciba.grant.enabled: "false"
          oauth2.device.authorization.grant.enabled: "false"
          client.secret.creation.time: "1720000181"
          backchannel.logout.session.required: "true"
          backchannel.logout.revoke.offline.tokens: "false"
        fullScopeAllowed: true
        nodeReRegistrationTimeout: -1
        protocolMappers:
          - name: "Client IP Address"
            protocol: "openid-connect"
            protocolMapper: "oidc-usersessionmodel-note-mapper"
            consentRequired: false
            config:
              user.session.note: "clientAddress"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "clientAddress"
              jsonType.label: "String"
          - name: "Client ID"
            protocol: "openid-connect"
            protocolMapper: "oidc-usersessionmodel-note-mapper"
            consentRequired: false
            config:
              user.session.note: "client_id"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "client_id"
              jsonType.label: "String"
          - name: "Client Host"
            protocol: "openid-connect"
            protocolMapper: "oidc-usersessionmodel-note-mapper"
            consentRequired: false
            config:
              user.session.note: "clientHost"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "clientHost"
              jsonType.label: "String"
        defaultClientScopes:
          - "web-origins"
          - "acr"
          - "roles"
          - "profile"
          - "email"
        optionalClientScopes:
          - "address"
          - "phone"
          - "offline_access"
          - "microprofile-jwt"
      - clientId: "security-admin-console"
        name: "${client_security-admin-console}"
        rootUrl: "${authAdminUrl}"
        baseUrl: "/admin/testrealm/console/"
        enabled: true
        clientAuthenticatorType: "client-secret"
        redirectUris:
          - "/admin/testrealm/console/*"
        webOrigins:
          - "+"
        notBefore: 0
        bearerOnly: false
        consentRequired: false
        standardFlowEnabled: true
        implicitFlowEnabled: false
        directAccessGrantsEnabled: false
        serviceAccountsEnabled: false
        publicClient: true
        frontchannelLogout: false
        protocol: "openid-connect"
        attributes:
          post.logout.redirect.uris: "+"
          pkce.code.challenge.method: "S256"
        fullScopeAllowed: false
        nodeReRegistrationTimeout: 0
        protocolMappers:
          - name: "locale"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "locale"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "locale"
              jsonType.label: "String"
        defaultClientScopes:
          - "web-origins"
          - "acr"
          - "roles"
          - "profile"
          - "email"
        optionalClientScopes:
          - "address"
          - "phone"
          - "offline_access"
          - "microprofile-jwt"
    clientScopes:
      - name: "microprofile-jwt"
        description: "Microprofile - JWT built-in scope"
        protocol: "openid-connect"
        attributes:
          include.in.token.scope: "true"
          display.on.consent.screen: "false"
        protocolMappers:
          - name: "groups"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-realm-role-mapper"
            consentRequired: false
            config:
              multivalued: "true"
              user.attribute: "foo"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "groups"
              jsonType.label: "String"
          - name: "upn"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "username"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "upn"
              jsonType.label: "String"
      - name: "role_list"
        description: "SAML role list"
        protocol: "saml"
        attributes:
          consent.screen.text: "${samlRoleListScopeConsentText}"
          display.on.consent.screen: "true"
        protocolMappers:
          - name: "role list"
            protocol: "saml"
            protocolMapper: "saml-role-list-mapper"
            consentRequired: false
            config:
              single: "false"
              attribute.nameformat: "Basic"
              attribute.name: "Role"
      - name: "roles"
        description: "OpenID Connect scope for add user roles to the access token"
        protocol: "openid-connect"
        attributes:
          include.in.token.scope: "false"
          display.on.consent.screen: "true"
          consent.screen.text: "${rolesScopeConsentText}"
        protocolMappers:
          - name: "realm roles"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-realm-role-mapper"
            consentRequired: false
            config:
              user.attribute: "foo"
              access.token.claim: "true"
              claim.name: "realm_access.roles"
              jsonType.label: "String"
              multivalued: "true"
          - name: "audience resolve"
            protocol: "openid-connect"
            protocolMapper: "oidc-audience-resolve-mapper"
            consentRequired: false
            config: {}
          - name: "client roles"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-client-role-mapper"
            consentRequired: false
            config:
              user.attribute: "foo"
              access.token.claim: "true"
              claim.name: "resource_access.${client_id}.roles"
              jsonType.label: "String"
              multivalued: "true"
      - name: "phone"
        description: "OpenID Connect built-in scope: phone"
        protocol: "openid-connect"
        attributes:
          include.in.token.scope: "true"
          display.on.consent.screen: "true"
          consent.screen.text: "${phoneScopeConsentText}"
        protocolMappers:
          - name: "phone number verified"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "phoneNumberVerified"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "phone_number_verified"
              jsonType.label: "boolean"
          - name: "phone number"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "phoneNumber"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "phone_number"
              jsonType.label: "String"
      - name: "web-origins"
        description: "OpenID Connect scope for add allowed web origins to the access token"
        protocol: "openid-connect"
        attributes:
          include.in.token.scope: "false"
          display.on.consent.screen: "false"
          consent.screen.text: ""
        protocolMappers:
          - name: "allowed web origins"
            protocol: "openid-connect"
            protocolMapper: "oidc-allowed-origins-mapper"
            consentRequired: false
            config: {}
      - name: "offline_access"
        description: "OpenID Connect built-in scope: offline_access"
        protocol: "openid-connect"
        attributes:
          consent.screen.text: "${offlineAccessScopeConsentText}"
          display.on.consent.screen: "true"
      - name: "email"
        description: "OpenID Connect built-in scope: email"
        protocol: "openid-connect"
        attributes:
          include.in.token.scope: "true"
          display.on.consent.screen: "true"
          consent.screen.text: "${emailScopeConsentText}"
        protocolMappers:
          - name: "email verified"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-property-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "emailVerified"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "email_verified"
              jsonType.label: "boolean"
          - name: "email"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "email"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "email"
              jsonType.label: "String"
      - name: "profile"
        description: "OpenID Connect built-in scope: profile"
        protocol: "openid-connect"
        attributes:
          include.in.token.scope: "true"
          display.on.consent.screen: "true"
          consent.screen.text: "${profileScopeConsentText}"
        protocolMappers:
          - name: "family name"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "lastName"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "family_name"
              jsonType.label: "String"
          - name: "username"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "username"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "preferred_username"
              jsonType.label: "String"
          - name: "middle name"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "middleName"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "middle_name"
              jsonType.label: "String"
          - name: "updated at"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "updatedAt"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "updated_at"
              jsonType.label: "long"
          - name: "nickname"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "nickname"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "nickname"
              jsonType.label: "String"
          - name: "full name"
            protocol: "openid-connect"
            protocolMapper: "oidc-full-name-mapper"
            consentRequired: false
            config:
              id.token.claim: "true"
              access.token.claim: "true"
              userinfo.token.claim: "true"
          - name: "given name"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "firstName"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "given_name"
              jsonType.label: "String"
          - name: "locale"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "locale"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "locale"
              jsonType.label: "String"
          - name: "birthdate"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "birthdate"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "birthdate"
              jsonType.label: "String"
          - name: "gender"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "gender"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "gender"
              jsonType.label: "String"
          - name: "website"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "website"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "website"
              jsonType.label: "String"
          - name: "zoneinfo"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "zoneinfo"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "zoneinfo"
              jsonType.label: "String"
          - name: "picture"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "picture"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "picture"
              jsonType.label: "String"
          - name: "profile"
            protocol: "openid-connect"
            protocolMapper: "oidc-usermodel-attribute-mapper"
            consentRequired: false
            config:
              userinfo.token.claim: "true"
              user.attribute: "profile"
              id.token.claim: "true"
              access.token.claim: "true"
              claim.name: "profile"
              jsonType.label: "String"
      - name: "address"
        description: "OpenID Connect built-in scope: address"
        protocol: "openid-connect"
        attributes:
          include.in.token.scope: "true"
          display.on.consent.screen: "true"
          consent.screen.text: "${addressScopeConsentText}"
        protocolMappers:
          - name: "address"
            protocol: "openid-connect"
            protocolMapper: "oidc-address-mapper"
            consentRequired: false
            config:
              user.attribute.formatted: "formatted"
              user.attribute.country: "country"
              user.attribute.postal_code: "postal_code"
              userinfo.token.claim: "true"
              user.attribute.street: "street"
              id.token.claim: "true"
              user.attribute.region: "region"
              access.token.claim: "true"
              user.attribute.locality: "locality"
      - name: "acr"
        description: "OpenID Connect scope for add acr (authentication context class reference) to the token"
        protocol: "openid-connect"
        attributes:
          include.in.token.scope: "false"
          display.on.consent.screen: "false"
        protocolMappers:
          - name: "acr loa level"
            protocol: "openid-connect"
            protocolMapper: "oidc-acr-mapper"
            consentRequired: false
            config:
              id.token.claim: "true"
              access.token.claim: "true"
    defaultDefaultClientScopes:
      - "role_list"
      - "profile"
      - "email"
      - "roles"
      - "web-origins"
      - "acr"
    defaultOptionalClientScopes:
      - "offline_access"
      - "address"
      - "phone"
      - "microprofile-jwt"
    browserSecurityHeaders:
      contentSecurityPolicyReportOnly: ""
      xContentTypeOptions: "nosniff"
      referrerPolicy: "no-referrer"
      xRobotsTag: "none"
      xFrameOptions: "SAMEORIGIN"
      contentSecurityPolicy: "frame-src 'self'; frame-ancestors 'self'; object-src 'none';"
      xXSSProtection: "1; mode=block"
      strictTransportSecurity: "max-age=31536000; includeSubDomains"
    smtpServer: {}
    eventsEnabled: false
    eventsListeners:
      - "jboss-logging"
    enabledEventTypes: []
    adminEventsEnabled: false
    adminEventsDetailsEnabled: false
    identityProviders: []
    identityProviderMappers: []
    components:
      "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy":
        - name: "Trusted Hosts"
          providerId: "trusted-hosts"
          config:
            host-sending-registration-request-must-match:
              - "true"
            client-uris-must-match:
              - "true"
        - name: "Allowed Protocol Mapper Types"
          providerId: "allowed-protocol-mappers"
          subType: "anonymous"
          config:
            allowed-protocol-mapper-types:
              - "oidc-usermodel-property-mapper"
              - "oidc-usermodel-attribute-mapper"
              - "saml-user-property-mapper"
              - "oidc-address-mapper"
              - "oidc-sha256-pairwise-sub-mapper"
              - "saml-role-list-mapper"
              - "saml-user-attribute-mapper"
              - "oidc-full-name-mapper"
        - name: "Allowed Protocol Mapper Types"
          providerId: "allowed-protocol-mappers"
          subType: "authenticated"
          config:
            allowed-protocol-mapper-types:
              - "oidc-usermodel-property-mapper"
              - "oidc-address-mapper"
              - "saml-user-attribute-mapper"
              - "oidc-sha256-pairwise-sub-mapper"
              - "oidc-usermodel-attribute-mapper"
              - "saml-role-list-mapper"
              - "saml-user-property-mapper"
              - "oidc-full-name-mapper"
        - name: "Full Scope Disabled"
          providerId: "scope"
          subType: "anonymous"
        - name: "Allowed Client Scopes"
          providerId: "allowed-client-templates"
          subType: "anonymous"
          config:
            allow-default-scopes:
              - "true"
        - name: "Consent Required"
          providerId: "consent-required"
          subType: "anonymous"
        - name: "Allowed Client Scopes"
          providerId: "allowed-client-templates"
          subType: "authenticated"
          config:
            allow-default-scopes:
              - "true"
        - name: "Max Clients Limit"
          providerId: "max-clients"
          subType: "anonymous"
          config:
            max-clients:
              - "200"
      "org.keycloak.keys.KeyProvider":
        - name: "rsa-generated"
          providerId: "rsa-generated"
          config:
            priority:
              - "100"
        - name: "aes-generated"
          providerId: "aes-generated"
          config:
            priority:
              - "100"
        - name: "rsa-enc-generated"
          providerId: "rsa-enc-generated"
          config:
            priority:
              - "100"
            algorithm:
              - "RSA-OAEP"
        - name: "hmac-generated"
          providerId: "hmac-generated"
          config:
            priority:
              - "100"
            algorithm:
              - "HS256"
    internationalizationEnabled: false
    supportedLocales: []
    authenticationFlows:
      - alias: "Account verification options"
        description: "Method with which to verify the existing account"
        providerId: "basic-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticator: "idp-email-verification"
            authenticatorFlow: false
            requirement: "ALTERNATIVE"
            priority: 10
            userSetupAllowed: false
          - authenticatorFlow: true
            requirement: "ALTERNATIVE"
            priority: 20
            flowAlias: "Verify Existing Account by Re-authentication"
            userSetupAllowed: false
      - alias: "Browser - Conditional OTP"
        description: "Flow to determine if the OTP is required for the authentication"
        providerId: "basic-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticator: "conditional-user-configured"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticator: "auth-otp-form"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 20
            userSetupAllowed: false
      - alias: "Direct Grant - Conditional OTP"
        description: "Flow to determine if the OTP is required for the authentication"
        providerId: "basic-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticator: "conditional-user-configured"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticator: "direct-grant-validate-otp"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 20
            userSetupAllowed: false
      - alias: "First broker login - Conditional OTP"
        description: "Flow to determine if the OTP is required for the authentication"
        providerId: "basic-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticator: "conditional-user-configured"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticator: "auth-otp-form"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 20
            userSetupAllowed: false
      - alias: "Handle Existing Account"
        description: "Handle what to do if there is existing account with same email/username like authenticated identity provider"
        providerId: "basic-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticator: "idp-confirm-link"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticatorFlow: true
            requirement: "REQUIRED"
            priority: 20
            flowAlias: "Account verification options"
            userSetupAllowed: false
      - alias: "Reset - Conditional OTP"
        description: "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force."
        providerId: "basic-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticator: "conditional-user-configured"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticator: "reset-otp"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 20
            userSetupAllowed: false
      - alias: "User creation or linking"
        description: "Flow for the existing/non-existing user alternatives"
        providerId: "basic-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticatorConfig: "create unique user config"
            authenticator: "idp-create-user-if-unique"
            authenticatorFlow: false
            requirement: "ALTERNATIVE"
            priority: 10
            userSetupAllowed: false
          - authenticatorFlow: true
            requirement: "ALTERNATIVE"
            priority: 20
            flowAlias: "Handle Existing Account"
            userSetupAllowed: false
      - alias: "Verify Existing Account by Re-authentication"
        description: "Reauthentication of existing account"
        providerId: "basic-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticator: "idp-username-password-form"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticatorFlow: true
            requirement: "CONDITIONAL"
            priority: 20
            flowAlias: "First broker login - Conditional OTP"
            userSetupAllowed: false
      - alias: "browser"
        description: "browser based authentication"
        providerId: "basic-flow"
        topLevel: true
        builtIn: true
        authenticationExecutions:
          - authenticator: "auth-cookie"
            authenticatorFlow: false
            requirement: "ALTERNATIVE"
            priority: 10
            userSetupAllowed: false
          - authenticator: "auth-spnego"
            authenticatorFlow: false
            requirement: "DISABLED"
            priority: 20
            userSetupAllowed: false
          - authenticator: "identity-provider-redirector"
            authenticatorFlow: false
            requirement: "ALTERNATIVE"
            priority: 25
            userSetupAllowed: false
          - authenticatorFlow: true
            requirement: "ALTERNATIVE"
            priority: 30
            flowAlias: "forms"
            userSetupAllowed: false
      - alias: "clients"
        description: "Base authentication for clients"
        providerId: "client-flow"
        topLevel: true
        builtIn: true
        authenticationExecutions:
          - authenticator: "client-secret"
            authenticatorFlow: false
            requirement: "ALTERNATIVE"
            priority: 10
            userSetupAllowed: false
          - authenticator: "client-jwt"
            authenticatorFlow: false
            requirement: "ALTERNATIVE"
            priority: 20
            userSetupAllowed: false
          - authenticator: "client-secret-jwt"
            authenticatorFlow: false
            requirement: "ALTERNATIVE"
            priority: 30
            userSetupAllowed: false
          - authenticator: "client-x509"
            authenticatorFlow: false
            requirement: "ALTERNATIVE"
            priority: 40
            userSetupAllowed: false
      - alias: "direct grant"
        description: "OpenID Connect Resource Owner Grant"
        providerId: "basic-flow"
        topLevel: true
        builtIn: true
        authenticationExecutions:
          - authenticator: "direct-grant-validate-username"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticator: "direct-grant-validate-password"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 20
            userSetupAllowed: false
          - authenticatorFlow: true
            requirement: "CONDITIONAL"
            priority: 30
            flowAlias: "Direct Grant - Conditional OTP"
            userSetupAllowed: false
      - alias: "docker auth"
        description: "Used by Docker clients to authenticate against the IDP"
        providerId: "basic-flow"
        topLevel: true
        builtIn: true
        authenticationExecutions:
          - authenticator: "docker-http-basic-authenticator"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
      - alias: "first broker login"
        description: "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account"
        providerId: "basic-flow"
        topLevel: true
        builtIn: true
        authenticationExecutions:
          - authenticatorConfig: "review profile config"
            authenticator: "idp-review-profile"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticatorFlow: true
            requirement: "REQUIRED"
            priority: 20
            flowAlias: "User creation or linking"
            userSetupAllowed: false
      - alias: "forms"
        description: "Username, password, otp and other auth forms."
        providerId: "basic-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticator: "auth-username-password-form"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticatorFlow: true
            requirement: "CONDITIONAL"
            priority: 20
            flowAlias: "Browser - Conditional OTP"
            userSetupAllowed: false
      - alias: "registration"
        description: "registration flow"
        providerId: "basic-flow"
        topLevel: true
        builtIn: true
        authenticationExecutions:
          - authenticator: "registration-page-form"
            authenticatorFlow: true
            requirement: "REQUIRED"
            priority: 10
            flowAlias: "registration form"
            userSetupAllowed: false
      - alias: "registration form"
        description: "registration form"
        providerId: "form-flow"
        topLevel: false
        builtIn: true
        authenticationExecutions:
          - authenticator: "registration-user-creation"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 20
            userSetupAllowed: false
          - authenticator: "registration-profile-action"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 40
            userSetupAllowed: false
          - authenticator: "registration-password-action"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 50
            userSetupAllowed: false
          - authenticator: "registration-recaptcha-action"
            authenticatorFlow: false
            requirement: "DISABLED"
            priority: 60
            userSetupAllowed: false
      - alias: "reset credentials"
        description: "Reset credentials for a user if they forgot their password or something"
        providerId: "basic-flow"
        topLevel: true
        builtIn: true
        authenticationExecutions:
          - authenticator: "reset-credentials-choose-user"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
          - authenticator: "reset-credential-email"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 20
            userSetupAllowed: false
          - authenticator: "reset-password"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 30
            userSetupAllowed: false
          - authenticatorFlow: true
            requirement: "CONDITIONAL"
            priority: 40
            flowAlias: "Reset - Conditional OTP"
            userSetupAllowed: false
      - alias: "saml ecp"
        description: "SAML ECP Profile Authentication Flow"
        providerId: "basic-flow"
        topLevel: true
        builtIn: true
        authenticationExecutions:
          - authenticator: "http-basic-authenticator"
            authenticatorFlow: false
            requirement: "REQUIRED"
            priority: 10
            userSetupAllowed: false
    authenticatorConfig:
      - alias: "create unique user config"
        config:
          require.password.update.after.registration: "false"
      - alias: "review profile config"
        config:
          update.profile.on.first.login: "missing"
    requiredActions:
      - alias: "CONFIGURE_TOTP"
        name: "Configure OTP"
        providerId: "CONFIGURE_TOTP"
        enabled: true
        defaultAction: false
        priority: 10
      - alias: "TERMS_AND_CONDITIONS"
        name: "Terms and Conditions"
        providerId: "TERMS_AND_CONDITIONS"
        enabled: false
        defaultAction: false
        priority: 20
      - alias: "UPDATE_PASSWORD"
        name: "Update Password"
        providerId: "UPDATE_PASSWORD"
        enabled: true
        defaultAction: false
        priority: 30
      - alias: "UPDATE_PROFILE"
        name: "Update Profile"
        providerId: "UPDATE_PROFILE"
        enabled: true
        defaultAction: false
        priority: 40
      - alias: "VERIFY_EMAIL"
        name: "Verify Email"
        providerId: "VERIFY_EMAIL"
        enabled: true
        defaultAction: false
        priority: 50
      - alias: "delete_account"
        name: "Delete Account"
        providerId: "delete_account"
        enabled: false
        defaultAction: false
        priority: 60
      - alias: "webauthn-register"
        name: "Webauthn Register"
        providerId: "webauthn-register"
        enabled: true
        defaultAction: false
        priority: 70
      - alias: "webauthn-register-passwordless"
        name: "Webauthn Register Passwordless"
        providerId: "webauthn-register-passwordless"
        enabled: true
        defaultAction: false
        priority: 80
      - alias: "update_user_locale"
        name: "Update User Locale"
        providerId: "update_user_locale"
        enabled: true
        defaultAction: false
        priority: 1000
    browserFlow: "browser"
    registrationFlow: "registration"
    directGrantFlow: "direct grant"
    resetCredentialsFlow: "reset credentials"
    clientAuthenticationFlow: "clients"
    dockerAuthenticationFlow: "docker auth"
    attributes:
      cibaBackchannelTokenDeliveryMode: "poll"
      cibaExpiresIn: "120"
      cibaAuthRequestedUserHint: "login_hint"
      oauth2DeviceCodeLifespan: "600"
      oauth2DevicePollingInterval: "5"
      parRequestUriLifespan: "60"
      cibaInterval: "5"
      realmReusableOtpCode: "false"
    keycloakVersion: "22.0.9.redhat-00002"
    userManagedAccessAllowed: false
    clientProfiles:
      profiles: []
    clientPolicies:
      policies: []